name: Build & Release Android and iOS builds for Flutter App

on:
  push:
    branches:
      - main

env:
  JAVA_VERSION: "11.x"
  FLUTTER_VERSION: "3.22.1"
  FLUTTER_CHANNEL: "stable"
  PROPERTIES_PATH: "./android/key.properties"

jobs:
  code_quality_and_testing:
    name: Code Quality and Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}

      - name: Install dependencies
        run: flutter pub get

      - name: Code formatter
        run: dart format --output=none --set-exit-if-changed .

      - name: Run Dart analyzer
        run: flutter analyze --fatal-warnings

      - name: Run tests
        run: flutter test

  build_and_sign_android_apk:
    name: Build Flutter (Android)
    runs-on: ubuntu-latest
    needs: code_quality_and_testing

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Java setup
        uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
          flutter-version: ${{env.FLUTTER_VERSION}}

      # Creating the key.properties file
      - run: |
          echo keyPassword=\${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }} > ${{env.PROPERTIES_PATH}}
          echo storePassword=\${{ secrets.ANDROID_KEYSTORE_PASSWORD }} >> ${{env.PROPERTIES_PATH}}
          echo keyAlias=\${{ secrets.ANDROID_SIGNING_KEY_ALIAS }} >> ${{env.PROPERTIES_PATH}}
      # Decoding base64 key into a file
      - run: echo "${{ secrets.ANDROID_KEYSTORE_FILE_BASE64 }}" | base64 --decode > android/app/key.jks

      - name: Build Android App Bundle
        run: |
          flutter pub get
          flutter build appbundle
      - name: Build APK
        run: flutter build apk --release --split-per-abi

      - name: Upload Android APKs and App Bundle as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-apks
          path: |
            build/app/outputs/flutter-apk/app-*.apk
            build/app/outputs/bundle/release/app-release.aab
  build_and_sign_ios_ipa:
    name: Build Flutter (iOS)
    runs-on: macos-latest
    needs: code_quality_and_testing

    steps:
      # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64_PART1 }}${{ secrets.MOBILEPROVISION_BASE64_PART2 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.22.1'

      - name: Install dependencies
        run: flutter pub get

      # Build and Sign your application here
      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist

      # Collect the file and upload as artifact
      - name: Upload iOS build as artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-ipa
          path: build/ios/ipa/*.ipa

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
  upload_release:
    runs-on: ubuntu-latest
    needs: [build_and_sign_android_apk, build_and_sign_ios_ipa]

    steps:
      - name: Download Android APKs
        uses: actions/download-artifact@v3
        with:
          name: android-apks
          path: .

      - name: Download iOS build
        uses: actions/download-artifact@v3
        with:
          name: release-ipa
          path: .

      - name: List APKs
        run: ls -R .

      - name: Upload Android APK and iOS IPA to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            flutter-apk/app-*.apk
            bundle/release/app-release.aab
            *.ipa
          tag: v1.0.${{ github.run_number}}
          token: ${{ secrets.TOKEN }}
